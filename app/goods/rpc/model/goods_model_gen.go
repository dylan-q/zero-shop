// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"
	"zero-shop/genModel"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsFieldNames          = builder.RawFieldNames(&Goods{})
	goodsRows                = strings.Join(goodsFieldNames, ",")
	goodsRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	goodsRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	goodsModel interface {
		Insert(ctx context.Context, data *Goods) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Goods, error)
		Update(ctx context.Context, data *Goods) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGoodsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Goods struct {
		Id          int64          `db:"id"`
		GoodsName   string         `db:"goods_name"`   // 商品名称
		CategoryId  int64          `db:"category_id"`  // 商品分类
		OnSale      int64          `db:"on_sale"`      // 是否在销售 1 是 0 否
		ShipFree    int64          `db:"ship_free"`    // 是否免运费 1 是 0 否
		IsNew       int64          `db:"is_new"`       // 是否最新 1 是 0 否
		IsHot       int64          `db:"is_hot"`       // 是否最热 1 是 0 否
		ClickNum    int64          `db:"click_num"`    // 查看次数
		SoldNum     int64          `db:"sold_num"`     // 售出数量
		FavNum      int64          `db:"fav_num"`      // 收藏数量
		MarketPrice float64        `db:"market_price"` // 市场价
		ShopPrice   float64        `db:"shop_price"`   // 售价
		GoodsBrief  string         `db:"goods_brief"`  // 商品简介
		GoodsDetail sql.NullString `db:"goods_detail"` // 商品详情
		CreateTime  time.Time      `db:"create_time"`
		UpdateTime  time.Time      `db:"update_time"`
	}
)

func newGoodsModel(conn sqlx.SqlConn) *defaultGoodsModel {
	return &defaultGoodsModel{
		conn:  conn,
		table: "`goods`",
	}
}

func (m *defaultGoodsModel) withSession(session sqlx.Session) *defaultGoodsModel {
	return &defaultGoodsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`goods`",
	}
}

func (m *defaultGoodsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGoodsModel) FindOne(ctx context.Context, id int64) (*Goods, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodsRows, m.table)
	var resp Goods
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, genModel.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsModel) Insert(ctx context.Context, data *Goods) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GoodsName, data.CategoryId, data.OnSale, data.ShipFree, data.IsNew, data.IsHot, data.ClickNum, data.SoldNum, data.FavNum, data.MarketPrice, data.ShopPrice, data.GoodsBrief, data.GoodsDetail)
	return ret, err
}

func (m *defaultGoodsModel) Update(ctx context.Context, data *Goods) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, goodsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.GoodsName, data.CategoryId, data.OnSale, data.ShipFree, data.IsNew, data.IsHot, data.ClickNum, data.SoldNum, data.FavNum, data.MarketPrice, data.ShopPrice, data.GoodsBrief, data.GoodsDetail, data.Id)
	return err
}

func (m *defaultGoodsModel) tableName() string {
	return m.table
}
