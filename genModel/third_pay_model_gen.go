// Code generated by goctl. DO NOT EDIT.

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	thirdPayFieldNames          = builder.RawFieldNames(&ThirdPay{})
	thirdPayRows                = strings.Join(thirdPayFieldNames, ",")
	thirdPayRowsExpectAutoSet   = strings.Join(stringx.Remove(thirdPayFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	thirdPayRowsWithPlaceHolder = strings.Join(stringx.Remove(thirdPayFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	thirdPayModel interface {
		Insert(ctx context.Context, data *ThirdPay) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ThirdPay, error)
		Update(ctx context.Context, data *ThirdPay) error
		Delete(ctx context.Context, id int64) error
	}

	defaultThirdPayModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ThirdPay struct {
		Id             int64        `db:"id"`
		Sn             string       `db:"sn"` // 订单流水号
		CreateTime     time.Time    `db:"create_time"`
		UpdateTime     time.Time    `db:"update_time"`
		UserId         int64        `db:"user_id"`
		PayMode        int64        `db:"pay_mode"`         // 1 微信支付 2 支付宝支付
		TradeType      string       `db:"trade_type"`       // 支付类型
		TradeState     string       `db:"trade_state"`      // 交易状态
		PayTotal       float64      `db:"pay_total"`        // 支付金额
		TransactionId  string       `db:"transaction_id"`   // 微信的订单号
		TradeStateDesc string       `db:"trade_state_desc"` // 订单支付描述
		OrderSn        string       `db:"order_sn"`         // 订单sn
		PayStatus      int64        `db:"pay_status"`       // -1:支付失败 0:未支付 1:支付成功 2:已退款
		PayTime        sql.NullTime `db:"pay_time"`         // 支付时间
	}
)

func newThirdPayModel(conn sqlx.SqlConn) *defaultThirdPayModel {
	return &defaultThirdPayModel{
		conn:  conn,
		table: "`third_pay`",
	}
}

func (m *defaultThirdPayModel) withSession(session sqlx.Session) *defaultThirdPayModel {
	return &defaultThirdPayModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`third_pay`",
	}
}

func (m *defaultThirdPayModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultThirdPayModel) FindOne(ctx context.Context, id int64) (*ThirdPay, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", thirdPayRows, m.table)
	var resp ThirdPay
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultThirdPayModel) Insert(ctx context.Context, data *ThirdPay) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, thirdPayRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Sn, data.UserId, data.PayMode, data.TradeType, data.TradeState, data.PayTotal, data.TransactionId, data.TradeStateDesc, data.OrderSn, data.PayStatus, data.PayTime)
	return ret, err
}

func (m *defaultThirdPayModel) Update(ctx context.Context, data *ThirdPay) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, thirdPayRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Sn, data.UserId, data.PayMode, data.TradeType, data.TradeState, data.PayTotal, data.TransactionId, data.TradeStateDesc, data.OrderSn, data.PayStatus, data.PayTime, data.Id)
	return err
}

func (m *defaultThirdPayModel) tableName() string {
	return m.table
}
